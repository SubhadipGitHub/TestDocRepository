name: Update Jekyll GitHub Pages for .doc Files

on:
  push:
    paths:
      - '**/*.doc'

jobs:
  update-jekyll-pages:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository content
      uses: actions/checkout@v3

    - name: Check if Jekyll structure exists and set up if needed
      run: |
        if [ ! -d "docs" ]; then
          echo "Setting up Jekyll structure..."
          mkdir -p docs/_posts
          echo "theme: minima" > docs/_config.yml
          echo "gems: [jekyll-paginate]" >> docs/_config.yml
          echo "permalink: /:title" >> docs/_config.yml
          echo "Jekyll structure set up."
          
          # Commit the changes back to main branch
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/_config.yml
          git commit -m "Set up Jekyll structure for GitHub Pages"
          git push
        elif [ ! -f "docs/_config.yml" ]; then
          echo "Setting up _config.yml..."
          echo "theme: minima" > docs/_config.yml
          echo "gems: [jekyll-paginate]" >> docs/_config.yml
          echo "permalink: /:title" >> docs/_config.yml
          echo "_config.yml created."
          
          # Commit the changes back to main branch
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/_config.yml
          git commit -m "Create _config.yml for GitHub Pages"
          git push
        else
          echo "Jekyll structure and _config.yml already exist."
        fi

    - name: Create a new post if .doc file updated
      if: ${{ github.event_name == 'push' && contains(github.event.head_commit.modified, '.doc') }}
      run: |
        COMMIT_HASH=$(git rev-parse HEAD)
        COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
        COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
        COMMIT_DATE=$(git log -1 --pretty=format:'%ci' | cut -d ' ' -f1)
        POST_DATE=$(date -u +'%Y-%m-%d')
        POST_TITLE=$(echo $COMMIT_MESSAGE | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')
        POST_FILENAME="docs/_posts/${POST_DATE}-${POST_TITLE}.markdown"
        echo "---" > $POST_FILENAME
        echo "title: \"$COMMIT_MESSAGE\"" >> $POST_FILENAME
        echo "date: \"$COMMIT_DATE\"" >> $POST_FILENAME
        echo "author: $COMMIT_AUTHOR" >> $POST_FILENAME
        echo "version: 1.0.0" >> $POST_FILENAME  # Adjust version as needed
        echo "category: release" >> $POST_FILENAME  # Adjust category as needed
        echo "---" >> $POST_FILENAME
        echo "Hey! After many months of hard work by contributors, we're excited to announce this update." >> $POST_FILENAME
        echo "Here are the highlights:" >> $POST_FILENAME
        echo "- Support for new feature X" >> $POST_FILENAME
        echo "- Bug fixes and improvements" >> $POST_FILENAME
        echo "" >> $POST_FILENAME
        echo "Check out the [full release notes](https://github.com/your/repository/commits/$COMMIT_HASH) for details." >> $POST_FILENAME

    - name: Deploy to GitHub Pages
      if: ${{ github.event_name == 'push' && contains(github.event.head_commit.modified, '.doc') }}
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
